# Generated by Django 4.2.5 on 2024-04-17 17:44

import django.contrib.postgres.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('jwql', '0021_alter_rootfileinfo_read_patt_num'),
    ]

    operations = [
        migrations.CreateModel(
            name='NIRSpecEdbTimeStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_edb_time_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecEdbTimeIntervalStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_edb_time_interval_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecEdbEveryChangeStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('time', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('mnemonic_value', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', models.FloatField(blank=True, null=True)),
                ('stdev', models.FloatField(blank=True, null=True)),
                ('dependency_mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('dependency_value', models.CharField(blank=True, max_length=40, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_edb_every_change_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecEdbDailyStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_edb_daily_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecEdbBlocksStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_edb_blocks_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecDarkQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('readpattern', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_dark_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecDarkPixelStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('detector', models.CharField(blank=True, max_length=40, null=True)),
                ('x_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('y_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('type', models.CharField(blank=True, max_length=40, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('mean_dark_image_file', models.CharField(max_length=1000, null=True)),
                ('baseline_file', models.CharField(max_length=1000, null=True)),
            ],
            options={
                'db_table': 'nirspec_dark_pixel_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecDarkDarkCurrent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('amplifier', models.CharField(blank=True, max_length=40, null=True)),
                ('readpattern', models.CharField(blank=True, max_length=40, null=True)),
                ('mean', models.FloatField(blank=True, null=True)),
                ('stdev', models.FloatField(blank=True, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('gauss_amplitude', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_peak', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_width', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_chisq', models.FloatField(blank=True, null=True)),
                ('double_gauss_amplitude1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_peak1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_width1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_amplitude2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_peak2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_width2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_chisq', models.FloatField(blank=True, null=True)),
                ('mean_dark_image_file', models.CharField(max_length=1000, null=True)),
                ('hist_dark_values', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('hist_amplitudes', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
            ],
            options={
                'db_table': 'nirspec_dark_dark_current',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecBadPixelStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('detector', models.CharField(blank=True, max_length=40, null=True)),
                ('x_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('y_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('type', models.CharField(blank=True, max_length=40, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('baseline_file', models.CharField(max_length=1000, null=True)),
            ],
            options={
                'db_table': 'nirspec_bad_pixel_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecBadPixelQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('dark_start_time_mjd', models.FloatField(blank=True, null=True)),
                ('dark_end_time_mjd', models.FloatField(blank=True, null=True)),
                ('flat_start_time_mjd', models.FloatField(blank=True, null=True)),
                ('flat_end_time_mjd', models.FloatField(blank=True, null=True)),
                ('dark_files_found', models.IntegerField(blank=True, null=True)),
                ('flat_files_found', models.IntegerField(blank=True, null=True)),
                ('run_bpix_from_darks', models.BooleanField(blank=True, null=True)),
                ('run_bpix_from_flats', models.BooleanField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_bad_pixel_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSEdbTimeStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'niriss_edb_time_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSEdbTimeIntervalStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'niriss_edb_time_interval_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSEdbEveryChangeStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('time', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('mnemonic_value', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', models.FloatField(blank=True, null=True)),
                ('stdev', models.FloatField(blank=True, null=True)),
                ('dependency_mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('dependency_value', models.CharField(blank=True, max_length=40, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'niriss_edb_every_change_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSEdbDailyStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'niriss_edb_daily_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSEdbBlocksStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'niriss_edb_blocks_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSDarkQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('readpattern', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'niriss_dark_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSDarkPixelStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('detector', models.CharField(blank=True, max_length=40, null=True)),
                ('x_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('y_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('type', models.CharField(blank=True, max_length=40, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('mean_dark_image_file', models.CharField(max_length=1000, null=True)),
                ('baseline_file', models.CharField(max_length=1000, null=True)),
            ],
            options={
                'db_table': 'niriss_dark_pixel_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSDarkDarkCurrent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('amplifier', models.CharField(blank=True, max_length=40, null=True)),
                ('readpattern', models.CharField(blank=True, max_length=40, null=True)),
                ('mean', models.FloatField(blank=True, null=True)),
                ('stdev', models.FloatField(blank=True, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('gauss_amplitude', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_peak', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_width', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_chisq', models.FloatField(blank=True, null=True)),
                ('double_gauss_amplitude1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_peak1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_width1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_amplitude2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_peak2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_width2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_chisq', models.FloatField(blank=True, null=True)),
                ('mean_dark_image_file', models.CharField(max_length=1000, null=True)),
                ('hist_dark_values', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('hist_amplitudes', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
            ],
            options={
                'db_table': 'niriss_dark_dark_current',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSBadPixelStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('detector', models.CharField(blank=True, max_length=40, null=True)),
                ('x_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('y_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('type', models.CharField(blank=True, max_length=40, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('baseline_file', models.CharField(max_length=1000, null=True)),
            ],
            options={
                'db_table': 'niriss_bad_pixel_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSBadPixelQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('dark_start_time_mjd', models.FloatField(blank=True, null=True)),
                ('dark_end_time_mjd', models.FloatField(blank=True, null=True)),
                ('flat_start_time_mjd', models.FloatField(blank=True, null=True)),
                ('flat_end_time_mjd', models.FloatField(blank=True, null=True)),
                ('dark_files_found', models.IntegerField(blank=True, null=True)),
                ('flat_files_found', models.IntegerField(blank=True, null=True)),
                ('run_bpix_from_darks', models.BooleanField(blank=True, null=True)),
                ('run_bpix_from_flats', models.BooleanField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'niriss_bad_pixel_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamEdbTimeStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_edb_time_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamEdbTimeIntervalStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_edb_time_interval_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamEdbEveryChangeStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('time', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('mnemonic_value', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', models.FloatField(blank=True, null=True)),
                ('stdev', models.FloatField(blank=True, null=True)),
                ('dependency_mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('dependency_value', models.CharField(blank=True, max_length=40, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_edb_every_change_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamEdbDailyStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_edb_daily_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamEdbBlocksStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_edb_blocks_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamDarkQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('readpattern', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_dark_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamDarkPixelStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('detector', models.CharField(blank=True, max_length=40, null=True)),
                ('x_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('y_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('type', models.CharField(blank=True, max_length=40, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('mean_dark_image_file', models.CharField(max_length=1000, null=True)),
                ('baseline_file', models.CharField(max_length=1000, null=True)),
            ],
            options={
                'db_table': 'nircam_dark_pixel_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamDarkDarkCurrent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('amplifier', models.CharField(blank=True, max_length=40, null=True)),
                ('readpattern', models.CharField(blank=True, max_length=40, null=True)),
                ('mean', models.FloatField(blank=True, null=True)),
                ('stdev', models.FloatField(blank=True, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('gauss_amplitude', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_peak', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_width', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_chisq', models.FloatField(blank=True, null=True)),
                ('double_gauss_amplitude1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_peak1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_width1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_amplitude2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_peak2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_width2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_chisq', models.FloatField(blank=True, null=True)),
                ('mean_dark_image_file', models.CharField(max_length=1000, null=True)),
                ('hist_dark_values', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('hist_amplitudes', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
            ],
            options={
                'db_table': 'nircam_dark_dark_current',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamBadPixelStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('detector', models.CharField(blank=True, max_length=40, null=True)),
                ('x_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('y_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('type', models.CharField(blank=True, max_length=40, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('baseline_file', models.CharField(max_length=1000, null=True)),
            ],
            options={
                'db_table': 'nircam_bad_pixel_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamBadPixelQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('dark_start_time_mjd', models.FloatField(blank=True, null=True)),
                ('dark_end_time_mjd', models.FloatField(blank=True, null=True)),
                ('flat_start_time_mjd', models.FloatField(blank=True, null=True)),
                ('flat_end_time_mjd', models.FloatField(blank=True, null=True)),
                ('dark_files_found', models.IntegerField(blank=True, null=True)),
                ('flat_files_found', models.IntegerField(blank=True, null=True)),
                ('run_bpix_from_darks', models.BooleanField(blank=True, null=True)),
                ('run_bpix_from_flats', models.BooleanField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_bad_pixel_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRIEdbTimeStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'miri_edb_time_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRIEdbTimeIntervalStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'miri_edb_time_interval_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRIEdbEveryChangeStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('time', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('mnemonic_value', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', models.FloatField(blank=True, null=True)),
                ('stdev', models.FloatField(blank=True, null=True)),
                ('dependency_mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('dependency_value', models.CharField(blank=True, max_length=40, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'miri_edb_every_change_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRIEdbDailyStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'miri_edb_daily_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRIEdbBlocksStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'miri_edb_blocks_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRIDarkQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('readpattern', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'miri_dark_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRIDarkPixelStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('detector', models.CharField(blank=True, max_length=40, null=True)),
                ('x_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('y_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('type', models.CharField(blank=True, max_length=40, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('mean_dark_image_file', models.CharField(max_length=1000, null=True)),
                ('baseline_file', models.CharField(max_length=1000, null=True)),
            ],
            options={
                'db_table': 'miri_dark_pixel_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRIDarkDarkCurrent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('amplifier', models.CharField(blank=True, max_length=40, null=True)),
                ('readpattern', models.CharField(blank=True, max_length=40, null=True)),
                ('mean', models.FloatField(blank=True, null=True)),
                ('stdev', models.FloatField(blank=True, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('gauss_amplitude', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_peak', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_width', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_chisq', models.FloatField(blank=True, null=True)),
                ('double_gauss_amplitude1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_peak1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_width1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_amplitude2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_peak2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_width2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_chisq', models.FloatField(blank=True, null=True)),
                ('mean_dark_image_file', models.CharField(max_length=1000, null=True)),
                ('hist_dark_values', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('hist_amplitudes', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
            ],
            options={
                'db_table': 'miri_dark_dark_current',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRIBadPixelStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('detector', models.CharField(blank=True, max_length=40, null=True)),
                ('x_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('y_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('type', models.CharField(blank=True, max_length=40, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('baseline_file', models.CharField(max_length=1000, null=True)),
            ],
            options={
                'db_table': 'miri_bad_pixel_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRIBadPixelQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('dark_start_time_mjd', models.FloatField(blank=True, null=True)),
                ('dark_end_time_mjd', models.FloatField(blank=True, null=True)),
                ('flat_start_time_mjd', models.FloatField(blank=True, null=True)),
                ('flat_end_time_mjd', models.FloatField(blank=True, null=True)),
                ('dark_files_found', models.IntegerField(blank=True, null=True)),
                ('flat_files_found', models.IntegerField(blank=True, null=True)),
                ('run_bpix_from_darks', models.BooleanField(blank=True, null=True)),
                ('run_bpix_from_flats', models.BooleanField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'miri_bad_pixel_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FGSEdbTimeStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fgs_edb_time_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FGSEdbTimeIntervalStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fgs_edb_time_interval_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FGSEdbEveryChangeStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('time', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('mnemonic_value', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', models.FloatField(blank=True, null=True)),
                ('stdev', models.FloatField(blank=True, null=True)),
                ('dependency_mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('dependency_value', models.CharField(blank=True, max_length=40, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fgs_edb_every_change_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FGSEdbDailyStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fgs_edb_daily_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FGSEdbBlocksStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(blank=True, max_length=40, null=True)),
                ('latest_query', models.DateTimeField(blank=True, null=True)),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), size=None)),
                ('data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('stdev', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('median', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('max', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('min', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fgs_edb_blocks_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FGSDarkQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('readpattern', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fgs_dark_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FGSDarkPixelStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('detector', models.CharField(blank=True, max_length=40, null=True)),
                ('x_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('y_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('type', models.CharField(blank=True, max_length=40, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('mean_dark_image_file', models.CharField(max_length=1000, null=True)),
                ('baseline_file', models.CharField(max_length=1000, null=True)),
            ],
            options={
                'db_table': 'fgs_dark_pixel_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FGSDarkDarkCurrent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('amplifier', models.CharField(blank=True, max_length=40, null=True)),
                ('readpattern', models.CharField(blank=True, max_length=40, null=True)),
                ('mean', models.FloatField(blank=True, null=True)),
                ('stdev', models.FloatField(blank=True, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('gauss_amplitude', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_peak', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_width', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('gauss_chisq', models.FloatField(blank=True, null=True)),
                ('double_gauss_amplitude1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_peak1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_width1', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_amplitude2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_peak2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_width2', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('double_gauss_chisq', models.FloatField(blank=True, null=True)),
                ('mean_dark_image_file', models.CharField(max_length=1000, null=True)),
                ('hist_dark_values', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('hist_amplitudes', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
            ],
            options={
                'db_table': 'fgs_dark_dark_current',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FGSBadPixelStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('detector', models.CharField(blank=True, max_length=40, null=True)),
                ('x_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('y_coord', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('type', models.CharField(blank=True, max_length=40, null=True)),
                ('source_files', models.TextField(blank=True, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_mid_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('baseline_file', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'fgs_bad_pixel_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FGSBadPixelQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('dark_start_time_mjd', models.FloatField(blank=True, null=True)),
                ('dark_end_time_mjd', models.FloatField(blank=True, null=True)),
                ('flat_start_time_mjd', models.FloatField(blank=True, null=True)),
                ('flat_end_time_mjd', models.FloatField(blank=True, null=True)),
                ('dark_files_found', models.IntegerField(blank=True, null=True)),
                ('flat_files_found', models.IntegerField(blank=True, null=True)),
                ('run_bpix_from_darks', models.BooleanField(blank=True, null=True)),
                ('run_bpix_from_flats', models.BooleanField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fgs_bad_pixel_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
    ]
