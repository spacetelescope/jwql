# Generated by Django 4.2.5 on 2024-02-23 16:50

import django.contrib.postgres.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('jwql', '0016_anomalies_bright_object_not_a_short_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='NIRSpecReadnoiseStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uncal_filename', models.CharField(blank=True, null=True)),
                ('aperture', models.CharField(blank=True, null=True)),
                ('detector', models.CharField(blank=True, null=True)),
                ('subarray', models.CharField(blank=True, null=True)),
                ('read_pattern', models.CharField(blank=True, null=True)),
                ('nints', models.CharField(blank=True, null=True)),
                ('ngroups', models.CharField(blank=True, null=True)),
                ('expstart', models.CharField(blank=True, null=True)),
                ('readnoise_filename', models.CharField(blank=True, null=True)),
                ('full_image_mean', models.FloatField(blank=True, null=True)),
                ('full_image_stddev', models.FloatField(blank=True, null=True)),
                ('full_image_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('full_image_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('readnoise_diff_image', models.CharField(blank=True, null=True)),
                ('diff_image_mean', models.FloatField(blank=True, null=True)),
                ('diff_image_stddev', models.FloatField(blank=True, null=True)),
                ('diff_image_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('diff_image_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
                ('amp1_mean', models.FloatField(blank=True, null=True)),
                ('amp1_stddev', models.FloatField(blank=True, null=True)),
                ('amp1_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp1_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp2_mean', models.FloatField(blank=True, null=True)),
                ('amp2_stddev', models.FloatField(blank=True, null=True)),
                ('amp2_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp2_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp3_mean', models.FloatField(blank=True, null=True)),
                ('amp3_stddev', models.FloatField(blank=True, null=True)),
                ('amp3_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp3_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp4_mean', models.FloatField(blank=True, null=True)),
                ('amp4_stddev', models.FloatField(blank=True, null=True)),
                ('amp4_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp4_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
            ],
            options={
                'db_table': 'nirspec_readnoise_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecReadnoiseQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.CharField(blank=True, null=True)),
                ('aperture', models.CharField(blank=True, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('entries_found', models.IntegerField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_readnoise_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSReadnoiseStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uncal_filename', models.CharField(blank=True, null=True)),
                ('aperture', models.CharField(blank=True, null=True)),
                ('detector', models.CharField(blank=True, null=True)),
                ('subarray', models.CharField(blank=True, null=True)),
                ('read_pattern', models.CharField(blank=True, null=True)),
                ('nints', models.CharField(blank=True, null=True)),
                ('ngroups', models.CharField(blank=True, null=True)),
                ('expstart', models.CharField(blank=True, null=True)),
                ('readnoise_filename', models.CharField(blank=True, null=True)),
                ('full_image_mean', models.FloatField(blank=True, null=True)),
                ('full_image_stddev', models.FloatField(blank=True, null=True)),
                ('full_image_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('full_image_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('readnoise_diff_image', models.CharField(blank=True, null=True)),
                ('diff_image_mean', models.FloatField(blank=True, null=True)),
                ('diff_image_stddev', models.FloatField(blank=True, null=True)),
                ('diff_image_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('diff_image_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
                ('amp1_mean', models.FloatField(blank=True, null=True)),
                ('amp1_stddev', models.FloatField(blank=True, null=True)),
                ('amp1_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp1_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp2_mean', models.FloatField(blank=True, null=True)),
                ('amp2_stddev', models.FloatField(blank=True, null=True)),
                ('amp2_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp2_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp3_mean', models.FloatField(blank=True, null=True)),
                ('amp3_stddev', models.FloatField(blank=True, null=True)),
                ('amp3_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp3_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp4_mean', models.FloatField(blank=True, null=True)),
                ('amp4_stddev', models.FloatField(blank=True, null=True)),
                ('amp4_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp4_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
            ],
            options={
                'db_table': 'niriss_readnoise_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSReadnoiseQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.CharField(blank=True, null=True)),
                ('aperture', models.CharField(blank=True, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('entries_found', models.IntegerField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'niriss_readnoise_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamReadnoiseStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uncal_filename', models.CharField(blank=True, null=True)),
                ('aperture', models.CharField(blank=True, null=True)),
                ('detector', models.CharField(blank=True, null=True)),
                ('subarray', models.CharField(blank=True, null=True)),
                ('read_pattern', models.CharField(blank=True, null=True)),
                ('nints', models.CharField(blank=True, null=True)),
                ('ngroups', models.CharField(blank=True, null=True)),
                ('expstart', models.CharField(blank=True, null=True)),
                ('readnoise_filename', models.CharField(blank=True, null=True)),
                ('full_image_mean', models.FloatField(blank=True, null=True)),
                ('full_image_stddev', models.FloatField(blank=True, null=True)),
                ('full_image_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('full_image_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('readnoise_diff_image', models.CharField(blank=True, null=True)),
                ('diff_image_mean', models.FloatField(blank=True, null=True)),
                ('diff_image_stddev', models.FloatField(blank=True, null=True)),
                ('diff_image_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('diff_image_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
                ('amp1_mean', models.FloatField(blank=True, null=True)),
                ('amp1_stddev', models.FloatField(blank=True, null=True)),
                ('amp1_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp1_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp2_mean', models.FloatField(blank=True, null=True)),
                ('amp2_stddev', models.FloatField(blank=True, null=True)),
                ('amp2_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp2_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp3_mean', models.FloatField(blank=True, null=True)),
                ('amp3_stddev', models.FloatField(blank=True, null=True)),
                ('amp3_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp3_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp4_mean', models.FloatField(blank=True, null=True)),
                ('amp4_stddev', models.FloatField(blank=True, null=True)),
                ('amp4_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp4_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
            ],
            options={
                'db_table': 'nircam_readnoise_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamReadnoiseQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.CharField(blank=True, null=True)),
                ('aperture', models.CharField(blank=True, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('entries_found', models.IntegerField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_readnoise_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamClawStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
                ('filename', models.CharField(blank=True, null=True)),
                ('proposal', models.CharField(blank=True, null=True)),
                ('obs', models.CharField(blank=True, null=True)),
                ('detector', models.CharField(blank=True, null=True)),
                ('filter', models.CharField(blank=True, null=True)),
                ('pupil', models.CharField(blank=True, null=True)),
                ('expstart', models.CharField(blank=True, null=True)),
                ('expstart_mjd', models.FloatField(blank=True, null=True)),
                ('effexptm', models.FloatField(blank=True, null=True)),
                ('ra', models.FloatField(blank=True, null=True)),
                ('dec', models.FloatField(blank=True, null=True)),
                ('pa_v3', models.FloatField(blank=True, null=True)),
                ('mean', models.FloatField(blank=True, null=True)),
                ('median', models.FloatField(blank=True, null=True)),
                ('stddev', models.FloatField(blank=True, null=True)),
                ('frac_masked', models.FloatField(blank=True, null=True)),
                ('skyflat_filename', models.CharField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_claw_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamClawQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
                ('instrument', models.CharField(blank=True, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_claw_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRIReadnoiseStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uncal_filename', models.CharField(blank=True, null=True)),
                ('aperture', models.CharField(blank=True, null=True)),
                ('detector', models.CharField(blank=True, null=True)),
                ('subarray', models.CharField(blank=True, null=True)),
                ('read_pattern', models.CharField(blank=True, null=True)),
                ('nints', models.CharField(blank=True, null=True)),
                ('ngroups', models.CharField(blank=True, null=True)),
                ('expstart', models.CharField(blank=True, null=True)),
                ('readnoise_filename', models.CharField(blank=True, null=True)),
                ('full_image_mean', models.FloatField(blank=True, null=True)),
                ('full_image_stddev', models.FloatField(blank=True, null=True)),
                ('full_image_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('full_image_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('readnoise_diff_image', models.CharField(blank=True, null=True)),
                ('diff_image_mean', models.FloatField(blank=True, null=True)),
                ('diff_image_stddev', models.FloatField(blank=True, null=True)),
                ('diff_image_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('diff_image_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
                ('amp1_mean', models.FloatField(blank=True, null=True)),
                ('amp1_stddev', models.FloatField(blank=True, null=True)),
                ('amp1_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp1_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp2_mean', models.FloatField(blank=True, null=True)),
                ('amp2_stddev', models.FloatField(blank=True, null=True)),
                ('amp2_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp2_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp3_mean', models.FloatField(blank=True, null=True)),
                ('amp3_stddev', models.FloatField(blank=True, null=True)),
                ('amp3_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp3_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp4_mean', models.FloatField(blank=True, null=True)),
                ('amp4_stddev', models.FloatField(blank=True, null=True)),
                ('amp4_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp4_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
            ],
            options={
                'db_table': 'miri_readnoise_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRIReadnoiseQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.CharField(blank=True, null=True)),
                ('aperture', models.CharField(blank=True, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('entries_found', models.IntegerField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'miri_readnoise_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FGSReadnoiseStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uncal_filename', models.CharField(blank=True, null=True)),
                ('aperture', models.CharField(blank=True, null=True)),
                ('detector', models.CharField(blank=True, null=True)),
                ('subarray', models.CharField(blank=True, null=True)),
                ('read_pattern', models.CharField(blank=True, null=True)),
                ('nints', models.CharField(blank=True, null=True)),
                ('ngroups', models.CharField(blank=True, null=True)),
                ('expstart', models.CharField(blank=True, null=True)),
                ('readnoise_filename', models.CharField(blank=True, null=True)),
                ('full_image_mean', models.FloatField(blank=True, null=True)),
                ('full_image_stddev', models.FloatField(blank=True, null=True)),
                ('full_image_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('full_image_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('readnoise_diff_image', models.CharField(blank=True, null=True)),
                ('diff_image_mean', models.FloatField(blank=True, null=True)),
                ('diff_image_stddev', models.FloatField(blank=True, null=True)),
                ('diff_image_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('diff_image_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
                ('amp1_mean', models.FloatField(blank=True, null=True)),
                ('amp1_stddev', models.FloatField(blank=True, null=True)),
                ('amp1_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp1_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp2_mean', models.FloatField(blank=True, null=True)),
                ('amp2_stddev', models.FloatField(blank=True, null=True)),
                ('amp2_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp2_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp3_mean', models.FloatField(blank=True, null=True)),
                ('amp3_stddev', models.FloatField(blank=True, null=True)),
                ('amp3_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp3_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp4_mean', models.FloatField(blank=True, null=True)),
                ('amp4_stddev', models.FloatField(blank=True, null=True)),
                ('amp4_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp4_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
            ],
            options={
                'db_table': 'fgs_readnoise_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FGSReadnoiseQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.CharField(blank=True, null=True)),
                ('aperture', models.CharField(blank=True, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('entries_found', models.IntegerField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fgs_readnoise_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
    ]
