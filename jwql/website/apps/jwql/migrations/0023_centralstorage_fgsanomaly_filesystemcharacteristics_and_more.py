# Generated by Django 4.1.7 on 2024-04-18 18:37

import django.contrib.postgres.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('jwql', '0022_nirspecedbtimestats_nirspecedbtimeintervalstats_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='CentralStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('area', models.CharField()),
                ('size', models.FloatField()),
                ('used', models.FloatField()),
                ('available', models.FloatField()),
            ],
            options={
                'db_table': 'central_storage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FgsAnomaly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rootname', models.CharField()),
                ('flag_date', models.DateTimeField()),
                ('user', models.CharField()),
                ('cosmic_ray_shower', models.BooleanField()),
                ('diffraction_spike', models.BooleanField()),
                ('excessive_saturation', models.BooleanField()),
                ('guidestar_failure', models.BooleanField()),
                ('persistence', models.BooleanField()),
                ('crosstalk', models.BooleanField()),
                ('data_transfer_error', models.BooleanField()),
                ('ghost', models.BooleanField()),
                ('snowball', models.BooleanField()),
                ('other', models.BooleanField()),
            ],
            options={
                'db_table': 'fgs_anomaly',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FilesystemCharacteristics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('instrument', models.TextField()),
                ('filter_pupil', models.TextField(blank=True, null=True)),
                ('obs_per_filter_pupil', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'filesystem_characteristics',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FilesystemGeneral',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(unique=True)),
                ('total_file_count', models.IntegerField()),
                ('total_file_size', models.FloatField()),
                ('fits_file_count', models.IntegerField()),
                ('fits_file_size', models.FloatField()),
                ('used', models.FloatField()),
                ('available', models.FloatField()),
            ],
            options={
                'db_table': 'filesystem_general',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MiriAnomaly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rootname', models.CharField()),
                ('flag_date', models.DateTimeField()),
                ('user', models.CharField()),
                ('cosmic_ray_shower', models.BooleanField()),
                ('diffraction_spike', models.BooleanField()),
                ('excessive_saturation', models.BooleanField()),
                ('guidestar_failure', models.BooleanField()),
                ('persistence', models.BooleanField()),
                ('column_pull_up', models.BooleanField()),
                ('internal_reflection', models.BooleanField()),
                ('row_pull_down', models.BooleanField()),
                ('other', models.BooleanField()),
                ('column_pull_down', models.BooleanField()),
                ('mrs_glow', models.BooleanField(db_column='MRS_Glow')),
                ('mrs_zipper', models.BooleanField(db_column='MRS_Zipper')),
                ('row_pull_up', models.BooleanField()),
                ('lrs_contamination', models.BooleanField(db_column='LRS_Contamination')),
                ('tree_rings', models.BooleanField()),
            ],
            options={
                'db_table': 'miri_anomaly',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Monitor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monitor_name', models.CharField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.TextField(blank=True, null=True)),
                ('log_file', models.CharField()),
            ],
            options={
                'db_table': 'monitor',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NircamAnomaly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rootname', models.CharField()),
                ('flag_date', models.DateTimeField()),
                ('user', models.CharField()),
                ('cosmic_ray_shower', models.BooleanField()),
                ('diffraction_spike', models.BooleanField()),
                ('excessive_saturation', models.BooleanField()),
                ('guidestar_failure', models.BooleanField()),
                ('persistence', models.BooleanField()),
                ('crosstalk', models.BooleanField()),
                ('data_transfer_error', models.BooleanField()),
                ('ghost', models.BooleanField()),
                ('snowball', models.BooleanField()),
                ('dragons_breath', models.BooleanField()),
                ('other', models.BooleanField()),
                ('scattered_light', models.BooleanField()),
                ('claws', models.BooleanField()),
                ('wisps', models.BooleanField()),
                ('tilt_event', models.BooleanField()),
            ],
            options={
                'db_table': 'nircam_anomaly',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NirissAnomaly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rootname', models.CharField()),
                ('flag_date', models.DateTimeField()),
                ('user', models.CharField()),
                ('cosmic_ray_shower', models.BooleanField()),
                ('diffraction_spike', models.BooleanField()),
                ('excessive_saturation', models.BooleanField()),
                ('guidestar_failure', models.BooleanField()),
                ('persistence', models.BooleanField()),
                ('crosstalk', models.BooleanField()),
                ('data_transfer_error', models.BooleanField()),
                ('ghost', models.BooleanField()),
                ('snowball', models.BooleanField()),
                ('other', models.BooleanField()),
                ('scattered_light', models.TextField()),
                ('light_saber', models.TextField()),
            ],
            options={
                'db_table': 'niriss_anomaly',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NirspecAnomaly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rootname', models.CharField()),
                ('flag_date', models.DateTimeField()),
                ('user', models.CharField()),
                ('cosmic_ray_shower', models.BooleanField()),
                ('diffraction_spike', models.BooleanField()),
                ('excessive_saturation', models.BooleanField()),
                ('guidestar_failure', models.BooleanField()),
                ('persistence', models.BooleanField()),
                ('crosstalk', models.BooleanField()),
                ('data_transfer_error', models.BooleanField()),
                ('ghost', models.BooleanField()),
                ('snowball', models.BooleanField()),
                ('dominant_msa_leakage', models.BooleanField(db_column='Dominant_MSA_Leakage')),
                ('optical_short', models.BooleanField()),
                ('other', models.BooleanField()),
            ],
            options={
                'db_table': 'nirspec_anomaly',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NIRSpecTaStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
                ('uncal_filename', models.CharField(blank=True, max_length=1000, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('detector', models.CharField(blank=True, max_length=40, null=True)),
                ('subarray', models.CharField(blank=True, max_length=40, null=True)),
                ('read_pattern', models.CharField(blank=True, max_length=40, null=True)),
                ('nints', models.CharField(blank=True, max_length=10, null=True)),
                ('ngroups', models.CharField(blank=True, max_length=10, null=True)),
                ('expstart', models.CharField(blank=True, max_length=50, null=True)),
                ('full_image_mean', models.FloatField(blank=True, null=True)),
                ('full_image_stddev', models.FloatField(blank=True, null=True)),
                ('full_image_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('full_image_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('diff_image_mean', models.FloatField(blank=True, null=True)),
                ('diff_image_stddev', models.FloatField(blank=True, null=True)),
                ('diff_image_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('diff_image_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp1_mean', models.FloatField(blank=True, null=True)),
                ('amp1_stddev', models.FloatField(blank=True, null=True)),
                ('amp1_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp1_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp2_mean', models.FloatField(blank=True, null=True)),
                ('amp2_stddev', models.FloatField(blank=True, null=True)),
                ('amp2_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp2_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp3_mean', models.FloatField(blank=True, null=True)),
                ('amp3_stddev', models.FloatField(blank=True, null=True)),
                ('amp3_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp3_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp4_mean', models.FloatField(blank=True, null=True)),
                ('amp4_stddev', models.FloatField(blank=True, null=True)),
                ('amp4_n', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp4_bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
            ],
            options={
                'db_table': 'nirspec_ta_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecTaQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('entries_found', models.IntegerField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_ta_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecGratingStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('time', models.CharField(blank=True, max_length=50, null=True)),
                ('inrsh_gwa_adcmgain', models.FloatField(blank=True, null=True)),
                ('inrsh_gwa_adcmoffset', models.FloatField(blank=True, null=True)),
                ('inrsh_gwa_motor_vref', models.FloatField(blank=True, null=True)),
                ('prism_inrsi_c_gwa_x_position', models.FloatField(blank=True, null=True)),
                ('prism_inrsi_c_gwa_y_position', models.FloatField(blank=True, null=True)),
                ('mirror_inrsi_c_gwa_x_position', models.FloatField(blank=True, null=True)),
                ('mirror_inrsi_c_gwa_y_position', models.FloatField(blank=True, null=True)),
                ('g140h_inrsi_c_gwa_x_position', models.FloatField(blank=True, null=True)),
                ('g140h_inrsi_c_gwa_y_position', models.FloatField(blank=True, null=True)),
                ('g235h_inrsi_c_gwa_x_position', models.FloatField(blank=True, null=True)),
                ('g235h_inrsi_c_gwa_y_position', models.FloatField(blank=True, null=True)),
                ('g395h_inrsi_c_gwa_x_position', models.FloatField(blank=True, null=True)),
                ('g395h_inrsi_c_gwa_y_position', models.FloatField(blank=True, null=True)),
                ('g140m_inrsi_c_gwa_x_position', models.FloatField(blank=True, null=True)),
                ('g140m_inrsi_c_gwa_y_position', models.FloatField(blank=True, null=True)),
                ('g235m_inrsi_c_gwa_x_position', models.FloatField(blank=True, null=True)),
                ('g235m_inrsi_c_gwa_y_position', models.FloatField(blank=True, null=True)),
                ('g395m_inrsi_c_gwa_x_position', models.FloatField(blank=True, null=True)),
                ('g395m_inrsi_c_gwa_y_position', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_grating_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecGratingQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_grating_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecCosmicRayStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('source_file', models.CharField(max_length=1000, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('jump_count', models.IntegerField(blank=True, null=True)),
                ('jump_rate', models.FloatField(blank=True, null=True)),
                ('magnitude', models.TextField(blank=True, null=True)),
                ('outliers', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_cosmic_ray_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecCosmicRayQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_cosmic_ray_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecBiasStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('uncal_filename', models.CharField(blank=True, max_length=1000, null=True)),
                ('cal_filename', models.CharField(blank=True, max_length=1000, null=True)),
                ('cal_image', models.CharField(blank=True, max_length=1000, null=True)),
                ('expstart', models.CharField(blank=True, max_length=50, null=True)),
                ('mean', models.FloatField(blank=True, null=True)),
                ('median', models.FloatField(blank=True, null=True)),
                ('stddev', models.FloatField(blank=True, null=True)),
                ('collapsed_rows', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('collapsed_columns', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('counts', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp1_even_med', models.FloatField(blank=True, null=True)),
                ('amp1_odd_med', models.FloatField(blank=True, null=True)),
                ('amp2_even_med', models.FloatField(blank=True, null=True)),
                ('amp2_odd_med', models.FloatField(blank=True, null=True)),
                ('amp3_even_med', models.FloatField(blank=True, null=True)),
                ('amp3_odd_med', models.FloatField(blank=True, null=True)),
                ('amp4_even_med', models.FloatField(blank=True, null=True)),
                ('amp4_odd_med', models.FloatField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_bias_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRSpecBiasQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('entries_found', models.IntegerField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nirspec_bias_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSCosmicRayStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('source_file', models.CharField(max_length=1000, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('jump_count', models.IntegerField(blank=True, null=True)),
                ('jump_rate', models.FloatField(blank=True, null=True)),
                ('magnitude', models.TextField(blank=True, null=True)),
                ('outliers', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'niriss_cosmic_ray_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSCosmicRayQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'niriss_cosmic_ray_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSBiasStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('uncal_filename', models.CharField(blank=True, max_length=1000, null=True)),
                ('cal_filename', models.CharField(blank=True, max_length=1000, null=True)),
                ('cal_image', models.CharField(blank=True, max_length=1000, null=True)),
                ('expstart', models.CharField(blank=True, max_length=50, null=True)),
                ('mean', models.FloatField(blank=True, null=True)),
                ('median', models.FloatField(blank=True, null=True)),
                ('stddev', models.FloatField(blank=True, null=True)),
                ('collapsed_rows', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('collapsed_columns', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('counts', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp1_even_med', models.FloatField(blank=True, null=True)),
                ('amp1_odd_med', models.FloatField(blank=True, null=True)),
                ('amp2_even_med', models.FloatField(blank=True, null=True)),
                ('amp2_odd_med', models.FloatField(blank=True, null=True)),
                ('amp3_even_med', models.FloatField(blank=True, null=True)),
                ('amp3_odd_med', models.FloatField(blank=True, null=True)),
                ('amp4_even_med', models.FloatField(blank=True, null=True)),
                ('amp4_odd_med', models.FloatField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'niriss_bias_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRISSBiasQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('entries_found', models.IntegerField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'niriss_bias_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamCosmicRayStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('source_file', models.CharField(max_length=1000, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('jump_count', models.IntegerField(blank=True, null=True)),
                ('jump_rate', models.FloatField(blank=True, null=True)),
                ('magnitude', models.TextField(blank=True, null=True)),
                ('outliers', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_cosmic_ray_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamCosmicRayQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_cosmic_ray_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamBiasStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('uncal_filename', models.CharField(blank=True, max_length=1000, null=True)),
                ('cal_filename', models.CharField(blank=True, max_length=1000, null=True)),
                ('cal_image', models.CharField(blank=True, max_length=1000, null=True)),
                ('expstart', models.CharField(blank=True, max_length=50, null=True)),
                ('mean', models.FloatField(blank=True, null=True)),
                ('median', models.FloatField(blank=True, null=True)),
                ('stddev', models.FloatField(blank=True, null=True)),
                ('collapsed_rows', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('collapsed_columns', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('counts', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('bin_centers', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('amp1_even_med', models.FloatField(blank=True, null=True)),
                ('amp1_odd_med', models.FloatField(blank=True, null=True)),
                ('amp2_even_med', models.FloatField(blank=True, null=True)),
                ('amp2_odd_med', models.FloatField(blank=True, null=True)),
                ('amp3_even_med', models.FloatField(blank=True, null=True)),
                ('amp3_odd_med', models.FloatField(blank=True, null=True)),
                ('amp4_even_med', models.FloatField(blank=True, null=True)),
                ('amp4_odd_med', models.FloatField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_bias_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='NIRCamBiasQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('entries_found', models.IntegerField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nircam_bias_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRITaStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('cal_file_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('detector', models.CharField(blank=True, max_length=40, null=True)),
                ('targx', models.FloatField(blank=True, null=True)),
                ('targy', models.FloatField(blank=True, null=True)),
                ('offset', models.FloatField(blank=True, null=True)),
                ('full_im_path', models.CharField(blank=True, max_length=1000, null=True)),
                ('zoom_im_path', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'miri_ta_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRITaQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('entries_found', models.IntegerField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
                ('entry_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'miri_ta_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRICosmicRayStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('source_file', models.CharField(max_length=1000, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('jump_count', models.IntegerField(blank=True, null=True)),
                ('jump_rate', models.FloatField(blank=True, null=True)),
                ('magnitude', models.TextField(blank=True, null=True)),
                ('outliers', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'miri_cosmic_ray_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='MIRICosmicRayQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'miri_cosmic_ray_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FilesystemInstrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('instrument', models.TextField()),
                ('filetype', models.TextField()),
                ('count', models.IntegerField()),
                ('size', models.FloatField()),
            ],
            options={
                'db_table': 'filesystem_instrument',
                'managed': True,
                'unique_together': {('date', 'instrument', 'filetype')},
            },
        ),
        migrations.CreateModel(
            name='FGSCosmicRayStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('source_file', models.CharField(max_length=1000, null=True)),
                ('obs_start_time', models.DateTimeField(blank=True, null=True)),
                ('obs_end_time', models.DateTimeField(blank=True, null=True)),
                ('jump_count', models.IntegerField(blank=True, null=True)),
                ('jump_rate', models.FloatField(blank=True, null=True)),
                ('magnitude', models.TextField(blank=True, null=True)),
                ('outliers', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fgs_cosmic_ray_stats',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
        migrations.CreateModel(
            name='FGSCosmicRayQueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateTimeField(unique=True)),
                ('instrument', models.CharField(blank=True, max_length=7, null=True)),
                ('aperture', models.CharField(blank=True, max_length=40, null=True)),
                ('start_time_mjd', models.FloatField(blank=True, null=True)),
                ('end_time_mjd', models.FloatField(blank=True, null=True)),
                ('files_found', models.IntegerField(blank=True, null=True)),
                ('run_monitor', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fgs_cosmic_ray_query_history',
                'managed': True,
                'unique_together': {('id', 'entry_date')},
            },
        ),
    ]
